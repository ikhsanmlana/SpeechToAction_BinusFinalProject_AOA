Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    PLAY
    STOP
    THANKS
    WRITE

Grammar

Rule 0     S' -> searching
Rule 1     searching -> expression
Rule 2     searching -> empty
Rule 3     expression -> expression expression
Rule 4     expression -> SEARCH
Rule 5     expression -> OPEN
Rule 6     expression -> WORD
Rule 7     expression -> AND
Rule 8     empty -> <empty>

Terminals, with rules where they appear

AND                  : 7
OPEN                 : 5
PLAY                 : 
SEARCH               : 4
STOP                 : 
THANKS               : 
WORD                 : 6
WRITE                : 
error                : 

Nonterminals, with rules where they appear

empty                : 2
expression           : 1 3 3
searching            : 0

Parsing method: LALR

state 0

    (0) S' -> . searching
    (1) searching -> . expression
    (2) searching -> . empty
    (3) expression -> . expression expression
    (4) expression -> . SEARCH
    (5) expression -> . OPEN
    (6) expression -> . WORD
    (7) expression -> . AND
    (8) empty -> .

    SEARCH          shift and go to state 4
    OPEN            shift and go to state 5
    WORD            shift and go to state 6
    AND             shift and go to state 7
    $end            reduce using rule 8 (empty -> .)

    searching                      shift and go to state 1
    expression                     shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> searching .



state 2

    (1) searching -> expression .
    (3) expression -> expression . expression
    (3) expression -> . expression expression
    (4) expression -> . SEARCH
    (5) expression -> . OPEN
    (6) expression -> . WORD
    (7) expression -> . AND

    $end            reduce using rule 1 (searching -> expression .)
    SEARCH          shift and go to state 4
    OPEN            shift and go to state 5
    WORD            shift and go to state 6
    AND             shift and go to state 7

    expression                     shift and go to state 8

state 3

    (2) searching -> empty .

    $end            reduce using rule 2 (searching -> empty .)


state 4

    (4) expression -> SEARCH .

    SEARCH          reduce using rule 4 (expression -> SEARCH .)
    OPEN            reduce using rule 4 (expression -> SEARCH .)
    WORD            reduce using rule 4 (expression -> SEARCH .)
    AND             reduce using rule 4 (expression -> SEARCH .)
    $end            reduce using rule 4 (expression -> SEARCH .)


state 5

    (5) expression -> OPEN .

    SEARCH          reduce using rule 5 (expression -> OPEN .)
    OPEN            reduce using rule 5 (expression -> OPEN .)
    WORD            reduce using rule 5 (expression -> OPEN .)
    AND             reduce using rule 5 (expression -> OPEN .)
    $end            reduce using rule 5 (expression -> OPEN .)


state 6

    (6) expression -> WORD .

    SEARCH          reduce using rule 6 (expression -> WORD .)
    OPEN            reduce using rule 6 (expression -> WORD .)
    WORD            reduce using rule 6 (expression -> WORD .)
    AND             reduce using rule 6 (expression -> WORD .)
    $end            reduce using rule 6 (expression -> WORD .)


state 7

    (7) expression -> AND .

    SEARCH          reduce using rule 7 (expression -> AND .)
    OPEN            reduce using rule 7 (expression -> AND .)
    WORD            reduce using rule 7 (expression -> AND .)
    AND             reduce using rule 7 (expression -> AND .)
    $end            reduce using rule 7 (expression -> AND .)


state 8

    (3) expression -> expression expression .
    (3) expression -> expression . expression
    (3) expression -> . expression expression
    (4) expression -> . SEARCH
    (5) expression -> . OPEN
    (6) expression -> . WORD
    (7) expression -> . AND

  ! shift/reduce conflict for SEARCH resolved as shift
  ! shift/reduce conflict for OPEN resolved as shift
  ! shift/reduce conflict for WORD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    $end            reduce using rule 3 (expression -> expression expression .)
    SEARCH          shift and go to state 4
    OPEN            shift and go to state 5
    WORD            shift and go to state 6
    AND             shift and go to state 7

  ! SEARCH          [ reduce using rule 3 (expression -> expression expression .) ]
  ! OPEN            [ reduce using rule 3 (expression -> expression expression .) ]
  ! WORD            [ reduce using rule 3 (expression -> expression expression .) ]
  ! AND             [ reduce using rule 3 (expression -> expression expression .) ]

    expression                     shift and go to state 8
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEARCH in state 8 resolved as shift
WARNING: shift/reduce conflict for OPEN in state 8 resolved as shift
WARNING: shift/reduce conflict for WORD in state 8 resolved as shift
WARNING: shift/reduce conflict for AND in state 8 resolved as shift
